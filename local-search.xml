<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LC160 - 相交链表</title>
    <link href="/2025/08/07/LC160/"/>
    <url>/2025/08/07/LC160/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原题">原题</h2><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code>，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回<code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><p><ahref="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"alt="img" /></a></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须<strong>保持其原始结构</strong> 。</p><p><strong>自定义评测：</strong></p><p><strong>评测系统</strong> 的输入如下（你设计的程序<strong>不适用</strong> 此输入）：</p><ul><li><code>intersectVal</code> -相交的起始节点的值。如果不存在相交节点，这一值为 <code>0</code></li><li><code>listA</code> - 第一个链表</li><li><code>listB</code> - 第二个链表</li><li><code>skipA</code> - 在 <code>listA</code>中（从头节点开始）跳到交叉节点的节点数</li><li><code>skipB</code> - 在 <code>listB</code>中（从头节点开始）跳到交叉节点的节点数</li></ul><p>评测系统将根据这些输入创建链式数据结构，并将两个头节点<code>headA</code> 和 <code>headB</code>传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被<strong>视作正确答案</strong> 。</p><p><strong>示例 1：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><imgsrc="https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png"alt="img" /></a></p><blockquote><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5],skipA = 2, skipB = 3 输出：Intersected at ‘8’ 解释：相交节点的值为 8（注意，如果两个链表相交则不能为 0）。 从各自的表头开始算起，链表 A 为[4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。 在 A 中，相交节点前有 2个节点；在 B 中，相交节点前有 3 个节点。 — 请注意相交节点的值不为1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B中第三个节点)是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点)在内存中指向相同的位置。</p></blockquote><p><strong>示例 2：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png"><imgsrc="https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png"alt="img" /></a></p><blockquote><p>输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA =3, skipB = 1 输出：Intersected at ‘2’ 解释：相交节点的值为 2（注意，如果两个链表相交则不能为 0）。 从各自的表头开始算起，链表 A 为[1,9,1,2,4]，链表 B 为 [3,2,4]。 在 A 中，相交节点前有 3 个节点；在 B中，相交节点前有 1 个节点。</p></blockquote><p><strong>示例 3：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png"><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_example_3.png"alt="img" /></a></p><blockquote><p>输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3,skipB = 2 输出：No intersection 解释：从各自的表头开始算起，链表 A 为[2,6,4]，链表 B 为 [1,5]。 由于这两个链表不相交，所以 intersectVal必须为 0，而 skipA 和 skipB 可以是任意值。 这两个链表不相交，因此返回null 。</p></blockquote><p><strong>提示：</strong></p><ul><li><code>listA</code> 中节点数目为 <code>m</code></li><li><code>listB</code> 中节点数目为 <code>n</code></li><li><code>1 &lt;= m, n &lt;= 3 * 104</code></li><li><code>1 &lt;= Node.val &lt;= 105</code></li><li><code>0 &lt;= skipA &lt;= m</code></li><li><code>0 &lt;= skipB &lt;= n</code></li><li>如果 <code>listA</code> 和 <code>listB</code>没有交点，<code>intersectVal</code> 为 <code>0</code></li><li>如果 <code>listA</code> 和 <code>listB</code>有交点，<code>intersectVal == listA[skipA] == listB[skipB]</code></li></ul><p><strong>进阶：</strong>你能否设计一个时间复杂度 <code>O(m + n)</code>、仅用 <code>O(1)</code> 内存的解决方案？</p><h2 id="题解">题解</h2><h3 id="自己解法哈希表">自己解法（哈希表）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Solution &#123;    public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;        ListNode curA &#x3D; headA;        ListNode curB &#x3D; headB;        HashSet&lt;ListNode&gt; seen &#x3D; new HashSet&lt;ListNode&gt;();                &#x2F;&#x2F; 遍历A和B的所有节点        while (headA !&#x3D; null || headB !&#x3D; null) &#123;                        &#x2F;&#x2F; 若headA为空则说明遍历完成，不进入代码块            if (headA !&#x3D; null) &#123;                &#x2F;&#x2F; headA不为空，将headA节点添加到哈希表中                &#x2F;&#x2F; 如果添加失败说明重复了，返回headA                if (!seen.add(headA)) &#123;                    return headA;                &#125;                &#x2F;&#x2F; 指针后移                headA &#x3D; headA.next;            &#125;                        &#x2F;&#x2F;headB同理            if (headB !&#x3D; null) &#123;                if (!seen.add(headB)) &#123;                    return headB;                &#125;                headB &#x3D; headB.next;            &#125;        &#125;        return null;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em> + <em>n</em>)</span>，<spanclass="math inline"><em>m</em></span>和<spanclass="math inline"><em>n</em></span>分别是链表长度。</p><p>空间复杂度： <spanclass="math inline"><em>O</em>(<em>m</em> + <em>n</em>)</span>，在最坏情况下，如果两个链表没有交点，那么会将所有$m + n $个节点都存进 <code>HashSet</code>。</p><h3 id="官方解法哈希表">官方解法（哈希表）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Solution &#123;    public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;        Set&lt;ListNode&gt; visited &#x3D; new HashSet&lt;ListNode&gt;();        ListNode temp &#x3D; headA;        while (temp !&#x3D; null) &#123;            visited.add(temp);            temp &#x3D; temp.next;        &#125;        temp &#x3D; headB;        while (temp !&#x3D; null) &#123;            if (visited.contains(temp)) &#123;                return temp;            &#125;            temp &#x3D; temp.next;        &#125;        return null;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em> + <em>n</em>)</span>，其中<span class="math inline"><em>m</em></span> 和 <spanclass="math inline"><em>n</em></span> 是分别是链表 headA 和 headB的长度。需要遍历两个链表各一次。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em>)</span>，其中 <spanclass="math inline"><em>m</em></span> 是链表 headA的长度。需要使用哈希集合存储链表 headA 中的全部节点。</p><h3 id="官方解法双指针">官方解法（双指针）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Solution &#123;    public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;        if (headA &#x3D;&#x3D; null || headB &#x3D;&#x3D; null) &#123;            return null;        &#125;        ListNode pA &#x3D; headA, pB &#x3D; headB;        while (pA !&#x3D; pB) &#123;            pA &#x3D; pA &#x3D;&#x3D; null ? headB : pA.next;            pB &#x3D; pB &#x3D;&#x3D; null ? headA : pB.next;        &#125;        return pA;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em> + <em>n</em>)</span>，其中<span class="math inline"><em>m</em></span> 和 <spanclass="math inline"><em>n</em></span> 是分别是链表 headA 和 headB的长度。两个指针同时遍历两个链表，每个指针遍历两个链表各一次。</p><p>空间复杂度：<span class="math inline"><em>O</em>(1)</span>。</p><h2 id="总结">总结</h2><p>自己当时的想法是想到了两数相加那一题，一口气遍历完两个链表，答案是正确的，但是空间复杂度偏高，把两个链表都存储了。</p><p>官方的哈希表解法中只存储了一个链表，另一个链表只用contains判断，时间复杂度相同，但是空间复杂度只有一个链表的长度。</p><p>官方的双指针解法需要细细品味：</p><p>假设A不重合长度为<spanclass="math inline"><em>m</em></span>，B不重合长度为<spanclass="math inline"><em>n</em></span>，AB重合长度为<spanclass="math inline"><em>k</em></span>。若A长度比B小，那么<code>pA</code>先走完<spanclass="math inline"><em>m</em> + <em>k</em></span>，也就是A的总长度，此时<code>pB</code>也走了相同步数。</p><p>A走到null时转到B的开头，当走到交点时，<code>pA</code>一共走了<spanclass="math inline"><em>m</em> + <em>k</em> + <em>n</em></span>,此时<code>pB</code>也走了这么多步，二者此时相遇。</p><p><strong>为什么这样一定能相遇？</strong></p><p>因为：</p><ul><li><code>pA</code> 实际上走了：A 全长 + B 非重合部分 = <spanclass="math inline"><em>m</em> + <em>k</em> + <em>n</em></span></li><li><code>pB</code> 实际上走了：B 全长 + A 非重合部分 = <spanclass="math inline"><em>m</em> + <em>k</em> + <em>n</em></span></li></ul><p>当两个指针互换链表后，相当于<strong>补足了长度差</strong>，让两个指针在相交处对齐。</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题记录</category>
      
      <category>Hot100</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
      <tag>简单</tag>
      
      <tag>链表</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC141 - 环形链表</title>
    <link href="/2025/08/07/LC141/"/>
    <url>/2025/08/07/LC141/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原题">原题</h2><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code>指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code>来表示链表尾连接到链表中的位置（索引从 0开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回<code>false</code> 。</p><p><strong>示例 1：</strong></p><figure><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; [3,2,0,-4], pos &#x3D; 1输出：true解释：链表中有一个环，其尾部连接到第二个节点。</code></pre></div></figure><p><strong>示例 2：</strong></p><figure><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; [1,2], pos &#x3D; 0输出：true解释：链表中有一个环，其尾部连接到第一个节点。</code></pre></div></figure><p><strong>示例 3：</strong></p><figure><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test3.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; [1], pos &#x3D; -1输出：false解释：链表中没有环。</code></pre></div></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 104]</code></li><li><code>-105 &lt;= Node.val &lt;= 105</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个<strong>有效索引</strong> 。</li></ul><p><strong>进阶：</strong>你能用<code>O(1)</code>（即，常量）内存解决此问题吗？</p><h2 id="题解">题解</h2><h3 id="floyd算法">Floyd算法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Solution &#123;    public boolean hasCycle(ListNode head) &#123;        if (head &#x3D;&#x3D; null || head.next &#x3D;&#x3D; null) return false;        ListNode quick &#x3D; head.next;        ListNode slow &#x3D; head;        while (quick !&#x3D; slow) &#123;            &#x2F;&#x2F; 由于快指针肯定在慢指针前面，所以只用快指针作为条件            if (quick &#x3D;&#x3D; null || quick.next &#x3D;&#x3D; null) &#123;                return false;            &#125;            quick &#x3D; quick.next.next;            slow &#x3D; slow.next;        &#125;        return true;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>n</em>)</span>，其中 <spanclass="math inline"><em>n</em></span> 是链表中的节点数。</p><p>当链表中不存在环时，快指针将先于慢指针到达链表尾部，链表中每个节点至多被访问两次。</p><p>当链表中存在环时，每一轮移动后，快慢指针的距离将减小一。而初始距离为环的长度，因此至多移动<span class="math inline"><em>n</em></span> 轮。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(1)</span>。我们只使用了两个指针的额外空间。</p><h3 id="哈希表">哈希表</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Solution &#123;    public boolean hasCycle(ListNode head) &#123;        Set&lt;ListNode&gt; seen &#x3D; new HashSet&lt;ListNode&gt;();        while (head !&#x3D; null) &#123;            &#x2F;&#x2F; 如果重复则有环            if (!seen.add(head)) &#123;                return true;            &#125;            head &#x3D; head.next;        &#125;        return false;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>n</em>)</span>，其中 <spanclass="math inline"><em>n</em></span>是链表中的节点数。最坏情况下我们需要遍历每个节点一次。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(<em>n</em>)</span>，其中 <spanclass="math inline"><em>n</em></span>是链表中的节点数。主要为哈希表的开销，最坏情况下我们需要将每个节点插入到哈希表中一次。</p><h2 id="总结">总结</h2><p>判断链表是否有环最经典的就是Floyd算法，利用快慢指针，如果有环那么快指针会追上慢指针，否则快指针会第一个指向null。</p><p>哈希表的方法也很好理解，不断添加节点到哈希表中，如果添加失败说明有重复的，有环。</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题记录</category>
      
      <category>Hot100</category>
      
      <category>Classic150</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简单</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC206 - 反转链表</title>
    <link href="/2025/08/06/LC206/"/>
    <url>/2025/08/06/LC206/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原题">原题</h2><p>给你单链表的头节点 <code>head</code>，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; [1,2,3,4,5]输出：[5,4,3,2,1]</code></pre></div></figure><p><strong>示例 2：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; [1,2]输出：[2,1]</code></pre></div></figure><p><strong>示例 3：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：head &#x3D; []输出：[]</code></pre></div></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><p><strong>进阶：</strong>链表可以选用迭代或递归方式完成反转。你能否用两种方法解决这道题？</p><h2 id="题解">题解</h2><h3 id="初始错误解法">初始错误解法❌</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public ListNode reverseList(ListNode head) &#123;        ListNode pre&#x3D;head;        ListNode cur&#x3D;pre.next;        while(cur!&#x3D;null)&#123;            ListNode temp&#x3D;cur.next;            cur.next&#x3D;pre;            pre&#x3D;cur;            cur&#x3D;temp;        &#125;        return pre;    &#125;&#125;</code></pre></div></figure><p>心路历程：头节点不需要反转，那么应该从头节点的下一个节点开始反转。</p><p>错误点：</p><ol type="1"><li>没有断尾：原始的head依然指向head.next，反转后的链表在末尾形成了环。（e.g原始链表 1 → 2 → 3 → null，按这种反转后3 → 2 → 1 → 2循环）</li><li>没有处理空链表：cur=head.next，head可能为空。</li></ol><h3 id="错误解法改正">错误解法改正</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">public ListNode reverseList(ListNode head) &#123;    if (head &#x3D;&#x3D; null || head.next &#x3D;&#x3D; null) return head;    ListNode pre &#x3D; head;    ListNode cur &#x3D; pre.next;    pre.next &#x3D; null; &#x2F;&#x2F; 必须断尾！！    while (cur !&#x3D; null) &#123;        ListNode temp &#x3D; cur.next;        cur.next &#x3D; pre;        pre &#x3D; cur;        cur &#x3D; temp;    &#125;    return pre;&#125;</code></pre></div></figure><h3 id="迭代解法">迭代解法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public ListNode reverseList(ListNode head) &#123;        &#x2F;&#x2F; 定义pre为null，使得head节点指向null        ListNode pre&#x3D;null;        ListNode cur&#x3D;head;                while(cur!&#x3D;null)&#123;            ListNode next&#x3D;cur.next;            cur.next&#x3D;pre;            pre&#x3D;cur;            cur&#x3D;next;        &#125;                &#x2F;&#x2F; 如果cur为空节点，返回值也是null        &#x2F;&#x2F; 如果cur非空，pre节点将是反转后链表的末尾节点，此时cur指向空        return pre;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>n</em>)</span>，其中 <spanclass="math inline"><em>n</em></span>是链表的长度。需要遍历链表一次。</p><p>空间复杂度：<span class="math inline"><em>O</em>(1)</span>。</p><h3 id="递归解法">递归解法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public ListNode reverseList(ListNode head) &#123;        if (head &#x3D;&#x3D; null || head.next &#x3D;&#x3D; null) &#123;            return head;        &#125;        ListNode newHead &#x3D; reverseList(head.next);        head.next.next &#x3D; head;        head.next &#x3D; null;        return newHead;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>n</em>)</span>，其中 <spanclass="math inline"><em>n</em></span>是链表的长度。需要对链表的每个节点进行反转操作。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(<em>n</em>)</span>，其中 <spanclass="math inline"><em>n</em></span>是链表的长度。空间复杂度主要取决于递归调用的栈空间，最多为 <spanclass="math inline"><em>n</em></span> 层。</p><h2 id="总结">总结</h2><p>递归解法暂时想不明白，先列在这里。</p><p>迭代解法在自己思考的时候整体思路还算正确，但是忽略了头节点需要指向null，导致链表最后成环。而且以null为初始pre节点，head为初始cur节点整个流程就完全没问题。错误想法中只想到最开始要head.next指向head，所以也没有考虑head为null的情况。</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题记录</category>
      
      <category>Hot100</category>
      
      <category>Classic150</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简单</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC035 - 搜索插入位置</title>
    <link href="/2025/08/06/LC035/"/>
    <url>/2025/08/06/LC035/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原题">原题</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><p><strong>示例 1:</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 5输出: 2</code></pre></div></figure><p><strong>示例 2:</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 2输出: 1</code></pre></div></figure><p><strong>示例 3:</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 7输出: 4</code></pre></div></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 为 <strong>无重复元素</strong> 的<strong>升序</strong> 排列数组</li><li><code>-104 &lt;= target &lt;= 104</code></li></ul><h2 id="题解">题解</h2><h3 id="二分查找">二分查找</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int searchInsert(int[] nums, int target) &#123;        &#x2F;&#x2F; 二分查找 左右采用闭区间[left,right]        int left &#x3D; 0;        int right &#x3D; nums.length - 1;        &#x2F;&#x2F; 循环边界条件有等于号        while (left &lt;&#x3D; right) &#123;            int mid &#x3D; left + (right - left) &#x2F; 2; &#x2F;&#x2F; (left+right) &#x2F; 2 可能会整型溢出            if (target &gt; nums[mid]) &#123;                left &#x3D; mid + 1;                  &#x2F;&#x2F; 左边界更新为mid+1            &#125; else if (target &lt; nums[mid]) &#123;                right &#x3D; mid - 1;                 &#x2F;&#x2F; 右边界更新为mid-1            &#125; else &#123;                return mid;            &#125;        &#125;        &#x2F;&#x2F; 二分查找返回left        return left;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>l</em><em>o</em><em>g</em><em>n</em>)</span>，其中<span class="math inline"><em>n</em></span>为数组的长度。二分查找所需的时间复杂度为 <spanclass="math inline"><em>O</em>(<em>l</em><em>o</em><em>g</em><em>n</em>)</span>。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(1)</span>。我们只需要常数空间存放若干变量。</p><h2 id="总结">总结</h2><p>二分查找的难点在于边界条件的选取，这里我选择了最符合直觉的。左右采用闭区间<spanclass="math inline">[<em>l</em><em>e</em><em>f</em><em>t</em>, <em>r</em><em>i</em><em>g</em><em>h</em><em>t</em>]</span>，此时循环的边界条件一定要有等于号，直觉上可以理解为闭区间是可以<spanclass="math inline"><em>l</em><em>e</em><em>f</em><em>t</em> = <em>r</em><em>i</em><em>g</em><em>h</em><em>t</em></span>的。同时左右边界的更新也比较符合直觉，大于<spanclass="math inline"><em>m</em><em>i</em><em>d</em></span>则更新左边界为<spanclass="math inline"><em>m</em><em>i</em><em>d</em> + 1</span>，小于<spanclass="math inline"><em>m</em><em>i</em><em>d</em></span>则更新右边界为<spanclass="math inline"><em>m</em><em>i</em><em>d</em> − 1</span>。但是最后的返回值是left不太符合直觉，直接记住就好，接下来放两个二分查找的模板参考：</p><h3 id="闭区间">闭区间</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int searchInsert(int[] nums, int target) &#123;        int left &#x3D; 0, right &#x3D; nums.length - 1; &#x2F;&#x2F; 注意                while(left &lt;&#x3D; right) &#123; &#x2F;&#x2F; 注意            int mid &#x3D; (left + right) &#x2F; 2; &#x2F;&#x2F; 注意                    if(nums[mid] &#x3D;&#x3D; target) &#123; &#x2F;&#x2F; 注意                &#x2F;&#x2F; 相关逻辑            &#125; else if(nums[mid] &lt; target) &#123;                left &#x3D; mid + 1; &#x2F;&#x2F; 注意            &#125; else &#123;                right &#x3D; mid - 1; &#x2F;&#x2F; 注意            &#125;        &#125;        &#x2F;&#x2F; 相关返回值        return left;    &#125;&#125;</code></pre></div></figure><h3 id="开区间">开区间</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int searchInsert(int[] nums, int target) &#123;        int left &#x3D; 0, right &#x3D; nums.length; &#x2F;&#x2F; 注意                while(left &lt; right) &#123; &#x2F;&#x2F; 注意            int mid &#x3D; (left + right) &#x2F; 2; &#x2F;&#x2F; 注意            if(nums[mid] &#x3D;&#x3D; target) &#123;                &#x2F;&#x2F; 相关逻辑            &#125; else if(nums[mid] &lt; target) &#123;                left &#x3D; mid + 1; &#x2F;&#x2F; 注意            &#125; else &#123;                right &#x3D; mid; &#x2F;&#x2F; 注意            &#125;        &#125;        &#x2F;&#x2F; 相关返回值        return left;    &#125;&#125;</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>力扣刷题记录</category>
      
      <category>Hot100</category>
      
      <category>Classic150</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简单</tag>
      
      <tag>二分查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC002 - 两数相加</title>
    <link href="/2025/08/06/LC002/"/>
    <url>/2025/08/06/LC002/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原题">原题</h2><p>给你两个 <strong>非空</strong>的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong>的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><figure><imgsrc="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]输出：[7,0,8]解释：342 + 465 &#x3D; 807.</code></pre></div></figure><p><strong>示例 2：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：l1 &#x3D; [0], l2 &#x3D; [0]输出：[0]</code></pre></div></figure><p><strong>示例 3：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]输出：[8,9,9,9,0,0,0,1]</code></pre></div></figure><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><h2 id="题解">题解</h2><h3id="自己的解法遍历到某一个链表为空">自己的解法（遍历到某一个链表为空）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123;        &#x2F;&#x2F; 定义结果链表        ListNode head &#x3D; new ListNode();        ListNode cur &#x3D; head;        &#x2F;&#x2F; 进位为全局变量        int carry &#x3D; 0;        &#x2F;&#x2F; 循环终止条件为l1或l2为空        while (l1 !&#x3D; null &amp;&amp; l2 !&#x3D; null) &#123;            ListNode temp &#x3D; new ListNode();            int sum &#x3D; l1.val + l2.val + carry;            temp.val &#x3D; sum % 10;            carry &#x3D; sum &#x2F; 10;            l1 &#x3D; l1.next;            l2 &#x3D; l2.next;            cur.next &#x3D; temp;            cur &#x3D; cur.next;        &#125;        &#x2F;&#x2F; 如果l2为空，l1还有结点        while (l1 !&#x3D; null) &#123;            int sum &#x3D; l1.val + carry;            l1.val &#x3D; sum % 10;            carry &#x3D; sum &#x2F; 10;            cur.next &#x3D; l1;            cur &#x3D; cur.next;            l1 &#x3D; l1.next;        &#125;        &#x2F;&#x2F; 如果l1为空，l2还有结点        while (l2 !&#x3D; null) &#123;            int sum &#x3D; l2.val + carry;            l2.val &#x3D; sum % 10;            carry &#x3D; sum &#x2F; 10;            cur.next &#x3D; l2;            cur &#x3D; cur.next;            l2 &#x3D; l2.next;        &#125;        &#x2F;&#x2F; 如果最后还有进位        if (carry &#x3D;&#x3D; 1) &#123;            cur.next &#x3D; new ListNode(1);        &#125;        return head.next;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：时间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em><em>a</em><em>x</em>(<em>m</em>, <em>n</em>))</span>，<span class="math inline"><em>m</em></span> 和 <spanclass="math inline"><em>n</em></span>分别为两个链表的长度循环的次数为最长的链表长度。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(1)</span>，只用了少量常量级变量。</p><h3 id="官方解法遍历到所有链表为空">官方解法（遍历到所有链表为空）</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123;        ListNode head &#x3D; new ListNode();        ListNode cur &#x3D; head;        int carry &#x3D; 0;        &#x2F;&#x2F; 循环终止条件为l1和l2都为空        while (l1 !&#x3D; null || l2 !&#x3D; null) &#123;            &#x2F;&#x2F; 如果l1或l2为空则置为0            int x &#x3D; l1 &#x3D;&#x3D; null ? 0 : l1.val;            int y &#x3D; l2 &#x3D;&#x3D; null ? 0 : l2.val;            int sum &#x3D; x + y + carry;            carry &#x3D; sum &#x2F; 10;            ListNode temp &#x3D; new ListNode(sum % 10);            cur.next &#x3D; temp;            cur &#x3D; cur.next;            &#x2F;&#x2F; 如果链表不为空则指针后移            if (l1 !&#x3D; null) &#123;                l1 &#x3D; l1.next;            &#125;            if (l2 !&#x3D; null) &#123;                l2 &#x3D; l2.next            &#125;        &#125;        &#x2F;&#x2F; 如果最后还有进位则新建一个节点        if (carry &gt; 0) &#123;            cur.next &#x3D; new ListNode(carry);        &#125;        return head.next;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：时间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em><em>a</em><em>x</em>(<em>m</em>, <em>n</em>))</span>，<span class="math inline"><em>m</em></span> 和 <spanclass="math inline"><em>n</em></span>分别为两个链表的长度循环的次数为最长的链表长度。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(1)</span>，只用了少量常量级变量。</p><h2 id="总结">总结</h2><p>虽然两种方法时间和空间复杂度相同，但是自己的解法使用了较多循环，而且很明显，后面两个循环的逻辑和最开始的循环逻辑相同。官方解法利用假如为空则置0，使得遍历两个链表只需要在一个循环中就可以，同时又一次运用了三元运算符节省代码量。</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题记录</category>
      
      <category>Hot100</category>
      
      <category>Classic150</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
      <tag>中等</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC021 - 合并两个有序链表</title>
    <link href="/2025/07/25/LC021/"/>
    <url>/2025/07/25/LC021/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原题">原题</h2><p>将两个升序链表合并为一个新的 <strong>升序</strong>链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><strong>示例 1：</strong></p><figure><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg"alt="示例图" /><figcaption aria-hidden="true">示例图</figcaption></figure><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：l1 &#x3D; [1,2,4], l2 &#x3D; [1,3,4]输出：[1,1,2,3,4,4]</code></pre></div></figure><p><strong>示例 2：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：l1 &#x3D; [], l2 &#x3D; []输出：[]</code></pre></div></figure><p><strong>示例 3：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：l1 &#x3D; [], l2 &#x3D; [0]输出：[0]</code></pre></div></figure><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong>排列</li></ul><h2 id="题解">题解</h2><h3 id="迭代">迭代</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public ListNode mergeTwoLists(ListNode list1, ListNode list2) &#123;        ListNode head &#x3D; new ListNode(); &#x2F;&#x2F; 定义一个新链表存储结果        ListNode cur &#x3D; head;            &#x2F;&#x2F;结果链表的指针        while (list1 !&#x3D; null &amp;&amp; list2 !&#x3D; null) &#123;            ListNode temp &#x3D; new ListNode();            if (list1.val &lt; list2.val) &#123;                temp.val &#x3D; list1.val; &#x2F;&#x2F; 将小值赋值给定义的链表节点                list1 &#x3D; list1.next;   &#x2F;&#x2F; list1指针后移                cur.next &#x3D; temp;      &#x2F;&#x2F; 将节点拼接在结果链表后面                cur &#x3D; cur.next;       &#x2F;&#x2F; 结果链表指针后移            &#125; else &#123;                temp.val &#x3D; list2.val;                list2 &#x3D; list2.next;                cur.next &#x3D; temp;                cur &#x3D; cur.next;            &#125;        &#125;        cur.next &#x3D; list1 &#x3D;&#x3D; null ? list2 : list1; &#x2F;&#x2F; list1和list2最多只有一个不为空，将不为空的拼接在结果链表后面        return head.next;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em> + <em>n</em>)</span>，m和n分别是两个链表的长度，每次循环添加一个节点，最多循环<spanclass="math inline"><em>m</em> + <em>n</em></span>次。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(1)</span>，常数空间存放变量。</p><h3 id="递归">递归</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public ListNode mergeTwoLists(ListNode list1, ListNode list2) &#123;        if (list1 &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; list1为空时直接返回list2            return list2;        &#125; else if (list2 &#x3D;&#x3D; null) &#123; &#x2F;&#x2F; list2为空时直接返回list1 前两个是终止条件            return list1;        &#125; else if (list1.val &lt; list2.val) &#123; &#x2F;&#x2F; list1更小，所以合并list1.next和list2，然后拼接在list1后，返回list1            list1.next &#x3D; mergeTwoLists(list1.next, list2);            return list1;        &#125; else &#123; &#x2F;&#x2F; list2更小同理            list2.next &#x3D; mergeTwoLists(list2.next, list1);            return list2;        &#125;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em> + <em>n</em>)</span>，每次递归添加一个节点，最多递归<spanclass="math inline"><em>m</em> + <em>n</em></span>次。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em> + <em>n</em>)</span>，递归调用mergeTwoLists函数时需要消耗栈空间，栈空间的大小取决于递归调用的深度。结束递归调用时mergeTwoLists 函数最多调用<spanclass="math inline"><em>m</em> + <em>n</em></span>次。</p><h2 id="总结">总结</h2><p>迭代的做法非常容易想到，和归并排序类似，不断将更小的节点移动到新链表中，然后向后移动指针。</p><p>为什么可以用递归来做，因为可以将这个问题拆成更小的同类问题。</p><p><span class="math display">$$\text{merge}(L_1, L_2) =\begin{cases}L_2, &amp; \text{if } L_1 = null \\L_1, &amp; \text{if } L_2 = null \\L_1 + \text{merge}(L_1.\text{next}, L_2), &amp; \text{if }L_1.\text{val} &lt; L_2.\text{val} \\L_2 + \text{merge}(L_1, L_2.\text{next}), &amp; \text{otherwise}\end{cases}$$</span></p><p>当写出这样的公式的时候，就顺其自然能写出代码了。</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题记录</category>
      
      <category>Hot100</category>
      
      <category>Classic150</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简单</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC088 - 合并两个有序数组</title>
    <link href="/2025/07/25/LC088/"/>
    <url>/2025/07/25/LC088/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原题">原题</h2><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组<code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和<code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code>中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code>中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组<code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为<code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后<code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code>的长度为 <code>n</code> 。</p><p><strong>示例 1：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3, nums2 &#x3D; [2,5,6], n &#x3D; 3输出：[1,2,2,3,5,6]解释：需要合并 [1,2,3] 和 [2,5,6] 。合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</code></pre></div></figure><p><strong>示例 2：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：nums1 &#x3D; [1], m &#x3D; 1, nums2 &#x3D; [], n &#x3D; 0输出：[1]解释：需要合并 [1] 和 [] 。合并结果是 [1] 。</code></pre></div></figure><p><strong>示例 3：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：nums1 &#x3D; [0], m &#x3D; 0, nums2 &#x3D; [1], n &#x3D; 1输出：[1]解释：需要合并的数组是 [] 和 [1] 。合并结果是 [1] 。注意，因为 m &#x3D; 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</code></pre></div></figure><p><strong>提示：</strong></p><ul><li><code>nums1.length == m + n</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= m + n &lt;= 200</code></li><li><code>-109 &lt;= nums1[i], nums2[j] &lt;= 109</code></li></ul><p><strong>进阶：</strong>你可以设计实现一个时间复杂度为<code>O(m + n)</code> 的算法解决此问题吗？</p><h2 id="题解">题解</h2><h3 id="暴力">暴力</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;        &#x2F;&#x2F; 将nums2放到nums1数组的后面        for (int i &#x3D; 0; i &lt; n; i++) &#123;            nums1[m + i] &#x3D; nums2[i];        &#125;        &#x2F;&#x2F; 排序整个nums1数组        Arrays.sort(nums1);    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>((<em>m</em> + <em>n</em>)<em>l</em><em>o</em><em>g</em>(<em>m</em> + <em>n</em>))</span>，<spanclass="math inline"><em>m</em> + <em>n</em></span>是数组总长度，快排时间复杂度是<spanclass="math inline"><em>O</em>(<em>n</em><em>l</em><em>o</em><em>g</em><em>n</em>)</span>，套用即可。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(<em>l</em><em>o</em><em>g</em>(<em>m</em> + <em>n</em>))</span>，套用快速排序的空间复杂度即可，平均情况为<spanclass="math inline"><em>O</em>(<em>l</em><em>o</em><em>g</em><em>n</em>)</span>。</p><h3 id="双指针">双指针</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;        int p1 &#x3D; m - 1; &#x2F;&#x2F; nums1的末尾指针        int p2 &#x3D; n - 1; &#x2F;&#x2F; nums2的末尾指针        int p &#x3D; nums1.length - 1; &#x2F;&#x2F; 归并数组的末尾指针                &#x2F;&#x2F; 归并nums1和nums2，比较大小，哪个大就放在末尾，然后指针前移继续比较        while (p1 &gt;&#x3D; 0 &amp;&amp; p2 &gt;&#x3D; 0) &#123;            nums1[p--] &#x3D; nums1[p1] &gt; nums2[p2] ? nums1[p1--] : nums2[p2--];        &#125;                &#x2F;&#x2F; 如果nums1没有排序完，不需要额外操作，因为本身就是有序的        &#x2F;&#x2F; 如果nums2没有排序完，将nums2依次添加到nums中        while (p2 &gt;&#x3D; 0) &#123;            nums1[p--] &#x3D; nums2[p2--];        &#125;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>m</em> + <em>n</em>)</span>，指针移动单调递减，一共移动<spanclass="math inline"><em>n</em> + <em>m</em></span>次。</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(1)</span>，直接对nums1进行修改，不需要额外空间。</p><h2 id="总结">总结</h2><p>暴力解法是最容易想到的，先把所有数都放在数组当中，然后一口气排序就可以得到结果，但是相当于没有用到这两个数组都是有序的条件，所以时间复杂度更高。</p><p>当给出有序数组排序的时候可以联想到归并排序的合并步骤，将两个数组头进行比较，小的放入归并后数组，然后移动指针。但是此处num1的头部是有数据的，如果直接使用归并算法的原思想的话，开头的元素会被覆盖，只能新开一个数组。不妨逆向思维，将两个数组尾比较，大的放到归并后数组尾部，尾部被覆盖就不会有问题。</p><p>同时此处复习一下三元运算符，使用三元运算符，以及灵活利用++，–符号，可以缩短代码。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">条件 ? 表达式1 : 表达式2</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>力扣刷题记录</category>
      
      <category>Hot100</category>
      
      <category>Classic150</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>简单</tag>
      
      <tag>数组</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LC001 - 两数之和</title>
    <link href="/2025/07/24/LC001/"/>
    <url>/2025/07/24/LC001/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="原题">原题</h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值<code>target</code>，请你在该数组中找出 <strong>和为目标值</strong><em><code>target</code></em> 的那 <strong>两个</strong>整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</code></pre></div></figure><p><strong>示例 2：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [3,2,4], target &#x3D; 6输出：[1,2]</code></pre></div></figure><p><strong>示例 3：</strong></p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [3,3], target &#x3D; 6输出：[0,1]</code></pre></div></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong>你可以想出一个时间复杂度小于<code>O(n2)</code> 的算法吗？</p><h2 id="题解">题解</h2><h3 id="暴力">暴力</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int[] twoSum(int[] nums, int target) &#123;        &#x2F;&#x2F; 取数组的一个数        for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;            &#x2F;&#x2F; 遍历该数后的每一个数，判断相加是否为target            for (int j &#x3D; i + 1; j &lt; nums.length; j++) &#123;                if (nums[i] + nums[j] &#x3D;&#x3D; target) &#123;                    return new int[]&#123;i, j&#125;;                &#125;            &#125;        &#125;        return new int[]&#123;0&#125;;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>N</em><sup>2</sup>)</span>，<spanclass="math inline"><em>N</em></span>是数组中元素数量，双层循环</p><p>空间复杂度：<span class="math inline"><em>O</em>(1)</span></p><h3 id="哈希表">哈希表</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Solution &#123;    public int[] twoSum(int[] nums, int target) &#123;        &#x2F;&#x2F; 构建HashMap key是数组中的数 value是对应下标        Map&lt;Integer, Integer&gt; map &#x3D; new HashMap&lt;&gt;();        &#x2F;&#x2F; 遍历数组        for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;            &#x2F;&#x2F; 找到了map中的一个key 这个key+nums[i]&#x3D;target ,返回对应的value和i            if (map.containsKey(target - nums[i])) &#123;                return new int[]&#123;i, map.get(target - nums[i])&#125;;            &#125;            map.put(nums[i], i);        &#125;        return new int[]&#123;0&#125;;    &#125;&#125;</code></pre></div></figure><p>时间复杂度：<spanclass="math inline"><em>O</em>(<em>N</em>)</span>，<spanclass="math inline"><em>N</em></span>是数组中元素数量</p><p>空间复杂度：<spanclass="math inline"><em>O</em>(<em>N</em>)</span>，<spanclass="math inline"><em>N</em></span>是数组中元素数量，哈希表存储开销</p><h2 id="总结">总结</h2><p>有人相爱，有人夜里开车看海，有人leetcode第一题都做不出来:）</p><p>暴力算法时间复杂度比较高，是因为需要两层循环，如何通过遍历一次数组就可以得到结果呢？可以利用哈希表的映射，key存储数组元素，value存储下标。对于每一个<code>x</code>，我们首先查询哈希表中是否存在<code>target - x</code>，然后将 <code>x</code>插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</p>]]></content>
    
    
    <categories>
      
      <category>力扣刷题记录</category>
      
      <category>Hot100</category>
      
      <category>Classic150</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希表</tag>
      
      <tag>简单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>excel表格拆分工作簿</title>
    <link href="/2024/07/27/01/"/>
    <url>/2024/07/27/01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="excel表格拆分工作簿">excel表格拆分工作簿</h2><p>今天遇到了这样一个使用场景，有一个excel表格，有23个工作表如图1所示。但我只需要部分工作表，我希望将表格拆分成独立的工作簿，如图2所示。</p><p><img src="1.png" width = 60% alt="图1"/></p><p><br> <br></p><p><img src="2.png" width = 60% alt="图2"/></p><p>1.打开需要拆分的工作表</p><p>2.点击功能区的开发工具栏（如果功能区没有开发工具栏，点击左上角文件 -选项 - 自定功能区，勾选开发工具并确定）</p><p>3.点击Visual Basic，弹出Visual Basic编辑器</p><p>4.点击插入，选择模块</p><p>5.输入代码，点击运行键（绿色播放键）</p><figure><div class="code-wrapper"><pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic">Sub 拆分工作簿()Dim ss As WorksheetApplication.DisplayAlerts &#x3D; FalseFor Each ss In WorksheetsWorkbooks.AddWith ActiveWorkbookss.Copy .Sheets(1).SaveAs ThisWorkbook.Path &amp; &quot;&#x2F;&quot; &amp; ss.Name.CloseEnd WithNext ssApplication.DisplayAlerts &#x3D; TrueMsgBox &quot;工作薄拆分完毕！&quot;End Sub</code></pre></div></figure><p>6.拆分的工作簿将输出到被拆分的工作表的目录下</p>]]></content>
    
    
    <categories>
      
      <category>Office小技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>又一次走上正轨</title>
    <link href="/2024/06/29/01/"/>
    <url>/2024/06/29/01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-TxExQyxr" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="252786" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="流水账">流水账</h2><p>论文的事情加上这几天电脑被霸占，又是好几天没写了。不得不说论文把我之前规律的生活彻底打乱，每天的学习，吉他还有健身都中断了很久（虽然只有几天但感觉很久）。尤其是健身，稍微停练几天就有种几个月没练的感觉。前几日和高中同学出去玩桌游，本来以为会有点尴尬，没想到比我想象的好很多，感觉我在熟人面前还是放的开点。晚上还打了麻将，好久没打红中赖子杠，都有点不记得规则了。学姐来玩的时间也定下来了，5号就可以一起玩了，好耶！不过感觉最近聊天有点点尴尬的气息，我有点没话找话，感觉学姐也不是很想回，好尴尬，救命。新吉他到了，感觉好好看，而且还能直接插耳机不会扰民。吉他还能折叠，到时候带去新加坡也挺方便。这几天把房子的事情也定下来了，1300新一个月，可能还要附加一些别的，妈的好贵。</p><p><img src="1.jpg" alt="新吉他" width = 100% /></p><p>明天起就可以恢复锻炼了，不知道掉没掉力量，每次停练几天总觉得自己掉肌肉了。而且最近也没有注意饮食，晚上家里没人就点了烧烤外卖，烧烤太好吃了，可惜不健康。感觉很多事，很多细节只有当天写下来才比较详细，稍微过个一两天就不记得啥了。我的记性时好时坏，有些事情记得可清楚，有些东西却记不太清。写着写着又想起来一些细节，跟高中同学出去玩，我问我跟高中有区别吗，他们觉得我一点都没变化，我是不是应该高兴，没显老。然后跟hyw交流留学的事情，本来以为我算有计划了，她告诉我现在就要考虑工签，公司还有跟大佬social啥的，突然发现自己还是没啥计划的p人，人家这才是j人。到时候再跟她请教请教应该咋整，想到要去social就头皮发麻。哦对，好几天没学习区块链了，到时候锻炼，学习，吉他还有旅游计划齐头并进。</p>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>流水账</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关关难过关关过</title>
    <link href="/2024/06/24/01/"/>
    <url>/2024/06/24/01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="流水账">流水账</h2><p>这两天忙着做旅游攻略，加上沉迷金铲铲，隔了好几天没写了。记性不好，记得深的写在吐槽里了。哦，对了！你怎么知道我三星小法吃鸡？<img src="1.jpg" width = 60% /><img src="2.jpg" width = 60% /><img src="3.jpg" width = 60% /></p><h2 id="吐槽">吐槽</h2><p>主要两点吐槽，第一个就是昨天参加了五伯办的酒，抽烟的人好多，好烦，闻到烟味就难受。而且我也不喜欢人多，尤其是还有一大堆不认得的亲戚，还老要敬酒什么的。酒桌文化就是纯纯的糟粕，啥时候才能彻底废除啊kuso，抽烟的也是，明明都写了室内不准抽烟，眼睛长得当摆设的。再就是今天早上，指导老师一个电话打过来说我论文不合格，我人都傻了，当时人都没睡醒，听到这个我直接麻了。我这b论文折腾了这么久咋又出幺蛾子，至于吗？说我不合格的原因也是离谱，我明明是只做前端的，论文当然只有前端，居然让我加后端，后端是我室友做的拜托，让我编一个后端论文上去不是纯纯造假？真傻逼啊，搞得我玩也不敢玩，心里都悬着，租个房都不踏实，别搞得老子到时候延毕了，草！</p><h2 id="锻炼">锻炼</h2><p>23号状态不好练的质量很差，而且本来也不太会练背，今天因为论文的事没去</p><table><thead><tr><th>动作</th><th>容量</th></tr></thead><tbody><tr><td>引体向上</td><td>10</td></tr><tr><td>直臂下压</td><td>12次4组</td></tr><tr><td>高位下拉</td><td>8次4组</td></tr><tr><td>器械划船</td><td>忘了8还是12了 4组</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锻炼</tag>
      
      <tag>流水账</tag>
      
      <tag>吐槽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chainlink公开课笔记1</title>
    <link href="/2024/06/18/02/"/>
    <url>/2024/06/18/02/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="solidity基础01">Solidity基础01</h1><h2 id="solidity官方文档">Solidity官方文档</h2><p><ahref="https://solidity-cn.readthedocs.io/zh/develop/solidity-in-depth.html">深入理解Solidity— Solidity develop 文档 (solidity-cn.readthedocs.io)</a></p><h2 id="solidity版本">solidity版本</h2><figure><div class="code-wrapper"><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity">&#x2F;&#x2F; 标注solidity版本&#x2F;&#x2F; SPDX-License-Identifier: MIT&#x2F;&#x2F; ^0.8.7 代表需要大于等于0.8.7版本&#x2F;&#x2F; 只有0.8.26代表只能使用0.8.26版本&#x2F;&#x2F; 可以用大于小于号指定版本范围&#x2F;&#x2F; eg. pragma solidity &gt;&#x3D;0.8.1 &lt;0.9.1pragma solidity ^0.8.26;</code></pre></div></figure><h2 id="solidity基础数据类型">solidity基础数据类型</h2><p>基础的数据类型：bool，uint，int，address</p><p><code>bool</code> ：可能的取值为字面常数值 <code>true</code> 和<code>false</code> 。</p><p><code>int</code> / <code>uint</code>：分别表示有符号和无符号的不同位数的整型变量。 支持关键字<code>uint8</code> 到 <code>uint256</code> （无符号，从 8 位到 256位）以及 <code>int8</code> 到 <code>int256</code>，以 <code>8</code>位为步长递增。 <code>uint</code> 和 <code>int</code> 分别是<code>uint256</code> 和 <code>int256</code> 的别名。</p><p><code>address</code>：地址类型存储一个 20字节的值（以太坊地址的大小）。地址类型也有成员变量，并作为所有合约的基础。</p><p><code>bytes</code>:变长字节数组。</p><p><code>string</code>:变长 UTF-8编码字符串类型。也是一种<code>bytes</code>，但是只能存储文本。</p><h2 id="solidity函数">solidity函数</h2><p>每个合约都有一个地址，就像每个账户都有地址一样。在部署后可以在终端看见部署细节，比如状态，交易哈希等等。部署一个合约相当于就是发送一个交易，在区块链做任何事，修改任何状态，就是在发一个交易。部署了一个合约就修改了区块链，让链上拥有这个合约。</p><figure><div class="code-wrapper"><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity">contract SimpleStorage&#123;    &#x2F;&#x2F; 会以0来初始化变量，如果没有赋值    &#x2F;&#x2F; 加上public才能看到变量    uint256 public favoriteNumber;    &#x2F;&#x2F; uint256 favoriteNumber;    function store(uint256 _favoriteNumber) public &#123;        favoriteNumber &#x3D; _favoriteNumber;        &#x2F;&#x2F; 增加操作，使得函数更复杂        &#x2F;&#x2F; favoriteNumber +&#x3D; 1;        &#x2F;&#x2F; 调用view函数是免费的，除非在消耗gas的函数中调用，因此此处gas会增加        &#x2F;&#x2F; retrieve();    &#125;        &#x2F;&#x2F; view，pure函数类型    &#x2F;&#x2F; 在合约区显示为蓝色，不消耗gas    function retrieve() public view returns(uint256)&#123;    return favoriteNumber;    &#125;        function add() public pure returns(uint256)&#123;    return(1+1);    &#125;&#125;</code></pre></div></figure><p>在部署合约区中，往框里输入114514，然后点击store，可以看到发了另一笔交易，在_favoriteNumber中存储了114514。但是无法知道favoriteNumber是否产生相应改变，因为favoriteNumber没有加修饰符public，加上后可以在部署合约区查看。<img src="1.png" alt="第一次传入变量" width = 100% /><img src="2.png" alt="第二笔交易" width = 100% /><img src="3.png" alt="查看变量" width = 100% /></p><p>在函数中增加操作，使函数更加复杂，这个函数消耗的计算量更多，执行交易消耗的gas也会更多。</p><p>定义solidity函数的语法：</p><figure><div class="code-wrapper"><pre class="line-numbers language-solidity" data-language="solidity"><code class="language-solidity">function functionName(type param1, type param2, ...) public&#x2F;external&#x2F;internal&#x2F;private returns (type1 returnVar1, type2 returnVar2,...) &#123;    &#x2F;&#x2F; 函数体&#125;</code></pre></div></figure><ul><li><code>function</code>：这是声明一个新函数所必需的关键字。</li><li><code>functionName</code>：这就是你给你的函数起名字。</li><li><code>type param1, type param2,...</code>：这些就是输入参数和它们对应类型。如果没有参数，那么括号内为空。</li><li><code>public/external/internal/private</code>:这些关键词定义了访问控制类型，决定了哪些其他合约或者账户可以调用该函数。<ul><li>public: 任何人都能调用此类方法</li><li>external: 只有外部账户和其他合约才能调用此类方法</li><li>internal:只有当前智能合同或者从当前智能合同继承来得到新创建得到智能合同才可访问此类方法</li><li>private: 只有当前智能协议内部可访问此类方法</li></ul></li><li><code>returns (type returnVar1,...)</code>:如果一个函数需要返回结果，那么需要使用returns关键字，后面跟着返回值的类型和变量名。</li></ul><h3 id="view-函数">View 函数</h3><p>可以将函数声明为 <code>view</code>类型，这种情况下要保证不修改状态。</p><p>下面的语句被认为是修改状态：</p><ol type="1"><li>修改状态变量。</li><li><ahref="https://solidity-cn.readthedocs.io/zh/develop/contracts.html#events">产生事件</a>。</li><li><ahref="https://solidity-cn.readthedocs.io/zh/develop/control-structures.html#creating-contracts">创建其它合约</a>。</li><li>使用 <code>selfdestruct</code>。</li><li>通过调用发送以太币。</li><li>调用任何没有标记为 <code>view</code> 或者 <code>pure</code>的函数。</li><li>使用低级调用。</li><li>使用包含特定操作码的内联汇编。</li></ol><blockquote><p>注解</p><p><code>constant</code> 是 <code>view</code> 的别名</p><p>Getter 方法被标记为 <code>view</code>。</p></blockquote><p><font color=red>警告：编译器没有强制 <code>view</code>方法不能修改状态。</font></p><h3 id="pure-函数">Pure 函数</h3><p>函数可以声明为 <code>pure</code>，在这种情况下，承诺不读取或修改状态。</p><p>除了上面解释的状态修改语句列表之外，以下被认为是从状态中读取：</p><ol type="1"><li>读取状态变量。</li><li>访问 <code>this.balance</code> 或者<code>&lt;address&gt;.balance</code>。</li><li>访问 <code>block</code>，<code>tx</code>， <code>msg</code>中任意成员 （除 <code>msg.sig</code> 和 <code>msg.data</code>之外）。</li><li>调用任何未标记为 <code>pure</code> 的函数。</li><li>使用包含某些操作码的内联汇编。</li></ol><p><font color=red>警告：编译器没有强制 <code>pure</code>方法不能读取状态。</font></p><h2 id="可见性标识符">可见性标识符</h2><p>函数和状态变量有四种可见性类型。 函数可以指定为 <code>external</code>，<code>public</code> ，<code>internal</code> 或者<code>private</code>，默认情况下函数类型为 <code>public</code>。对于状态变量，不能设置为 <code>external</code> ，默认是<code>internal</code> 。</p><p><code>external</code> ：</p><p>外部函数作为合约接口的一部分，意味着我们可以从其他合约和交易中调用。一个外部函数 <code>f</code> 不能从内部调用（即 <code>f</code>不起作用，但 <code>this.f()</code> 可以）。当收到大量数据的时候，外部函数有时候会更有效率。</p><p><code>public</code> ：</p><p>public函数是合约接口的一部分，可以在内部或通过消息调用。对于公共状态变量，会自动生成一个 getter 函数。</p><p><code>internal</code> ：</p><p>这些函数和状态变量只能是内部访问（即从当前合约内部或从它派生的合约访问），不使用<code>this</code> 调用。</p><p><code>private</code> ：</p><p>private函数和状态变量仅在当前定义它们的合约中使用，并且不能被派生合约使用。</p><blockquote><p>注解</p><p>合约中的所有内容对外部观察者都是可见的。设置一些 <code>private</code>类型只能阻止其他合约访问和修改这些信息，但是对于区块链外的整个世界它仍然是可见的。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>代码</tag>
      
      <tag>Chainlink公开课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I love you more than you&#39;ll ever know</title>
    <link href="/2024/06/18/01/"/>
    <url>/2024/06/18/01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-XpqMOYuj" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1824020871" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="流水账">流水账</h2><p>早上干了碗热干面加两个鸡蛋，然后跑去找cmr和ymx去王家湾试驾。说是试驾，但没有提前预约，实际上只是到车上坐了一下，体验了一下内饰，音响（cmr你就放你那个onelastkiss吧），语音，空间等等。经过将近几个月的锻炼，和他们一对比，突然感觉自己练的确实很有点成效。他们的胳膊我现在看上去真的细，贴一张今天测的臂围，刚练的臂，虽然练的不是很到位，理论应该二头四个动作，三头四个动作，但是健身房没有牧师凳，以前习惯的训练计划不能执行，到时候调整一下别的动作计划。<img src="1.jpg" alt="臂围32cm" width = 30% /></p><p>今天试驾算是彻底对bba祛魅了，宝马i3纯纯油改电，别人的电车智能化都相当不错，你堂堂bmw听个歌还得连蓝牙，车机系统有一种十年前的美，如果十年前你20w卖这个，肯定冲爆。但是现在新能源你这个车纯纯工业垃圾，隔壁零跑感觉都比你强，20w纯纯买个标。然后体验了一下小米su7和极氪007还不错，问界m9的老板椅也坐的很爽。特斯拉要是不取消怀挡和转向灯的档把感觉还行，现在屏幕换挡和按钮打灯真心反人类。以后自己开还是新能源好，当了老板再考虑高端bba吧，低端bba纯属装逼。</p><p>下午练吉他，第二次课就光速进入和弦，按的手真疼啊，我收回之前说手不疼的话。突然感觉吉他也挺难的，泪目。今天就在狂按Am,C,Em和弦，感觉手指总会碰到别的弦，手指得很垂直才按的好，从Am切换C和弦的时候总觉得手指跟不上去，也按不紧。吉他好难😭。练完带py去健身房撸铁，他举5kg的弯举都很费劲，感觉一对比我又自信了（我好阴暗）。今天实在不想做有氧了，鸽了。</p><p>这两天没咋上网课，今天晚上补补，好好学习，提升自己，以后努力多打hackthon，认识大佬。</p><p>最后顺便臭美一下，感觉胸练的还行。不过昨天练了肩，今天斜方肌真的酸啊，哭了，真全练斜方上了。我这肩膀头子以后咋办啊，难顶。哦对，回武汉后被蚊子咬了一万个包，在哈尔滨我都没咋见过蚊子。我恨蚊子，希望蚊子早日灭绝。<img src="2.jpg" alt="我也不知道我拍了个啥,啥都看不清" width = 30% /></p><h2 id="画饼">画饼</h2><p>过段时间加个相册页面，然后折腾一下懒加载。</p><h2 id="锻炼">锻炼</h2><table><thead><tr><th>动作</th><th>容量</th></tr></thead><tbody><tr><td>二头杠铃弯举</td><td>20kg 12 8 4 4</td></tr><tr><td>龙门架弯举</td><td>20kg 12次4组</td></tr><tr><td>绳索下压</td><td>20kg 12次4组</td></tr><tr><td>哑铃过头臂屈伸</td><td>10kg 12次4组</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锻炼</tag>
      
      <tag>流水账</tag>
      
      <tag>出去玩</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神佛道愁莫渡江 六根清净涤得空</title>
    <link href="/2024/06/17/01/"/>
    <url>/2024/06/17/01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-uBMbjpxn" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="2101237552" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="上午写两笔">上午写两笔</h2><p>想不出来大标题写啥了，以后不知道标题怎么起就随便找个词或歌当标题好了。这几天每天早上九点多就自然醒了，晚上十二点一点睡，睡满八小时还挺好，醒来也不会觉得难受。在学校的时候总是觉得睡不醒，起床后人又难受，中午吃晚饭还犯困。回家后作息确实规律多了，不过醒了还是会赖床，躺在床上刷一会手机，虽然也不知道刷什么，也没人给我发消息了，也没啥好看的。brunch吃了个热干面，本来想去沙县小吃再搞点鸡腿饭，但一是感觉吃不完，二是怕自己吃太多了。回来的路上在想早餐午餐没摄入蛋白质，光靠练后喝蛋白粉，还有晚饭的肉蛋白质真的够吗，理论上现在增肌需要1.6-2g蛋白质/kg体重。随便想想就知道包不够的，一勺蛋白粉才24g蛋白质，以后早餐还是得好好吃，而且不能光碳水，也得整点蛋。</p><p>下午要去学吉他，之前在寝室弹过室友的吉他，感觉手指被琴弦压得好疼，不过吉他比较好学，闲着也是闲着，学学也挺好。下午再继续写，哦对，顺便研究一下aplayer和如何网课做笔记，感觉好久没做笔记已经不知道该怎么做了。</p><h2 id="下午写两笔">下午写两笔</h2><p>练了一下吉他感觉还不错，还算比较容易学，而且之前在寝室有尝试过室友的吉他，他的吉他按着感觉特别割手，但是今天用的吉他按着就觉得很舒服，手指一点都不疼。今天练肩，确实感觉肩膀不太会练，而且肩膀荒废了好久，力量感觉掉的很明显，今天飞鸟估计全飞斜方上了，偶雷哇斜方肌之王。回来路上我妈问我以后想开什么车，我说假如我有点小钱，预算20w左右的话，我想开byd汉或者极氪，假如我预算有30w的话，我可能会上阿维塔。要是我赚挺多，一年百八十万的话就搞个bba开开，估计整个奔驰e或者奥迪A7L（我觉得A7L黑武士挺帅的）。假如我成富哥了，我就整个帕拉梅拉。假如我当老板了，我就整个迈巴赫。（现在是幻想时间）回家干饭后不知道为啥，感觉特别累，估计练多了吧，今天有氧做的比昨天猛，配速比昨天高。直接在床上躺到快晚上十点，然后起来，开始继续写。今早胸都是酸的，胸算是练到位了，但昨天练的背是一点感觉没有啊草，反而二头三头有点酸，牛魔的，不知道这个背和肩怎么个练法。感觉自己知道练的动作，但是做的不标准导致肌肉刺激不到位吧。晚上再折腾一下播放器，如果折腾成功了这篇文章应该就有播放功能了。</p><p>真神奇啊，折腾了半天，播放功能突然出来了，但是我也没改啥配置啊，难道是之前的歌的id有问题？？？反正出来了就好。</p><h2 id="锻炼">锻炼</h2><table><thead><tr><th>动作</th><th>容量</th></tr></thead><tbody><tr><td>实力推</td><td>25kg 8次2组 20kg 6次2组</td></tr><tr><td>坐姿推肩</td><td>10kg 8次2组 7.5kg 8次2组</td></tr><tr><td>飞鸟</td><td>7.5kg 5kg超级组</td></tr><tr><td>蝴蝶机反向飞鸟</td><td>忘了多少kg 12次4组</td></tr><tr><td>爬坡</td><td>坡度15 配速4.5 25min 配速5 5min</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锻炼</tag>
      
      <tag>流水账</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开启一段新生活？</title>
    <link href="/2024/06/16/04/"/>
    <url>/2024/06/16/04/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="流水账">流水账</h2><p>很久没吃过三餐了，回家这几天被迫一日三餐正常饮食，虽然基本九十点起床，但是还是得吃早餐。中午一点左右吃中饭，下午五六点吃晚饭。早上把之前看过几集的区块链公开课重新看了一遍，打算做做笔记，我也不知道能坚持多久，感觉做笔记还是有点困难的，我不太能抓住重点，全记下的话又觉得很臃肿，相当于把老师说的话抄了一遍。到时候再学学具体做笔记的方法论。</p><p>下午去健身房练背，感觉没有教练，背，肩始终还是不太会练，不太确定动作是否标准，发力到不到位。健身房的杠铃杆有些生锈，我的手套已经沾上锈了。不过今天有氧整了半小时，比昨天强多了。不过感觉爬坡的时候右腿的小腿肌肉酸的厉害，估计是太久没做有氧导致的吧。我也不知道无氧后的有氧有没有用，听说无氧能消耗糖原，再去做有氧就能消耗脂肪了，希望如此吧，低体脂确实好看。突然想起来今天做引体做的真费劲，在寝室的杠子能做2-3个，今天在健身房一个自由引体都拉不起，可能是在这之前做了高位下拉，有点力竭了吧。不知道啥时候自由引体能做组，估计那个时候背部肌肉就很明显了吧。</p><p>练完开车送我妈去超市，路上提了一嘴吉他钢琴什么的，我妈直接就给我安排老师了，她的人脉是真的丰富，我佩服的五体投地。路上开着车，听着歌，感觉每天学习一下，锻炼身体，再学点乐器，玩玩游戏，过的挺充实的。以前有点抑郁，找不到任何生活的乐趣，现在充实一点感觉人好多了，尤其是健身能分泌多巴胺。希望我能坚持下去，不过健身我都坚持下来了，感觉坚持别的这些应该也挺简单？毕竟挺快乐的，不是被强迫的，突然感觉这才是生活。</p><h2 id="画饼">画饼</h2><p>这几天接触博客，很想加入播放器插件，到时候研究一下aplayer，安排一下。</p><h2 id="锻炼">锻炼</h2><table><thead><tr><th>动作</th><th>容量</th></tr></thead><tbody><tr><td>高位下拉</td><td>4片 12次4组</td></tr><tr><td>器械划船</td><td>39kg 8次4组</td></tr><tr><td>杠铃划船</td><td>30kg 12次4组</td></tr><tr><td>器械引体</td><td>4次5组（太弱了）</td></tr><tr><td>爬坡</td><td>坡度15 速度4 30min</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锻炼</tag>
      
      <tag>流水账</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京大学肖臻老师《区块链技术与应用》公开课笔记2</title>
    <link href="/2024/06/16/03/"/>
    <url>/2024/06/16/03/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="btc-密码学原理">02-BTC-密码学原理</h1><h2 id="使用的密码学功能">使用的密码学功能</h2><p>1.哈希</p><p>2.签名</p><h3 id="哈希">哈希</h3><p>哈希采用cryptographic hash function，有两个重要的性质：</p><p>1.抗碰撞性collision resistance</p><p>并非完全不会产生哈希碰撞，实际上碰撞时客观存在的，但是没有什么高效的方法人为地制造哈希碰撞，只能采用brute-force(暴力破解)。但是工作量太大，实际不可行。</p><p>collisionresistance的作用：对信息作摘要。H(m)=digest，当m的值更改后，digest的值也会发生变化。这个性质指很难找到一个m’，使得H(m’)=H(m)</p><p>2.隐蔽性hiding</p><p>给定一个x可以算出H(x)，但是不能通过H(x)反推出x。</p><p>hiding的作用：可以和collision resistance共同作用，实现digitalcommitment(digital equivalent of a sealedenvelope)。我个人的理解是，我可以公开H(x)，但是他人无法反推出x，并且由于H(x)的公开，我不能篡改x，如果他人需要验证，篡改的x’会导致H(x)!=H(x’)</p><p>实际操作上，为了使输入输出更加随机，会拼接nonce，输出H(x||nonce)</p><p>以上是密码学要求的哈希的函数的性质，除此之外，比特币中的哈希函数还需要用到第三个性质：puzzlefriendly</p><p>哈希值产生的范围不可预测，比如要求生成一个前k位都是0的哈希值，只能一个个尝试，不能走捷径。</p><p>挖矿实质就是找到那个nonce，通过暴力尝试出H(blockheader||nonce)&lt;=target space，挖矿的过程产生了工作量证明(proof ofwork),difficult to solve, but easy to verify.</p><p>比特币使用的哈希函数为SHA-256。</p><h3 id="签名">签名</h3><p>开户只需要创立公私钥对，基于非对称加密体系。用接收人公布的公钥加密，接收人通过自己的私钥解密。</p><p>好处是公钥可以公开，解决了对称加密中密钥分发的问题。发布交易时用自己的私钥加密，他人用公钥验证签名是否有效。</p><h3 id="思考">思考</h3><p>collision resistance和puzzlefriendly看上去很相似，我认为最本质的区别是collisionresistance只需要保证输出不会碰撞，但是可能会有某个输入的范围或者输入的规律，使得输出也有相应的规律。打一个不恰当比方，可能会有这样一个哈希函数，输入aaa，输出的开头一定包含aaa，比如aaa111。而puzzlefriendly则是避免了这种情况，不存在所谓的规律可行，使得可以专门构造输入生成一定规律的输出，所以只能暴力枚举尝试。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>理论</tag>
      
      <tag>《区块链技术与应用》公开课</tag>
      
      <tag>密码学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北京大学肖臻老师《区块链技术与应用》公开课笔记1</title>
    <link href="/2024/06/16/02/"/>
    <url>/2024/06/16/02/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="课程简介">01-课程简介</h1><h2 id="区块链的本质是什么">区块链的本质是什么</h2><p>1.有人说是下一代的价值互联网</p><p>2.有人说世界上最慢的数据库</p><p>实际上只当数据库使用非常缓慢，而且只实现了数据库的一部分功能。区块链技术目前比较有争议，有很多人吹捧区块链，也有人认为区块链就是庞氏骗局。区块链整体发展还处于早期阶段，需要强调的是，区块链≠加密货币。加密货币只是基于区块链技术的产物。</p><h2 id="课程大纲比特币">课程大纲：比特币</h2><p>比特币</p><ul><li>密码学基础</li><li>比特币的数据结构</li><li>共识协议和系统实现</li><li>挖矿算法和难度调整</li><li>比特币脚本</li><li>软分叉和硬分叉</li><li>匿名和隐私保护</li></ul><h2 id="课程大纲以太坊">课程大纲：以太坊</h2><p>以太坊</p><ul><li>概述：基于账户的分布式账本</li><li>数据结构：状态树、交易树、收据树</li><li>GHOST协议</li><li>挖矿：memory-hard mining puzzle</li><li>挖矿难度调整</li><li>权益证明</li><li>智能合约</li></ul><p>总结与展望</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>理论</tag>
      
      <tag>《区块链技术与应用》公开课</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在右键菜单新增文件类型</title>
    <link href="/2024/06/16/01/"/>
    <url>/2024/06/16/01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="在右键菜单新增文件类型">在右键菜单新增文件类型</h2><p>最近需要频繁写md文件，但是右键菜单中不能直接新建，每次都需要新建一个别的文件再更改后缀名。实在嫌麻烦，于是想办法做到如同新增ppt，word之类的效果。</p><p>1.打开注册表 regedit</p><p>2.进入路径[计算机_CLASSES_ROOT\{后缀名}]eg.计算机_CLASSES_ROOT\.md</p><p>3.点击{后缀名}文件夹，双击右侧（默认）项，将数值改为默认打开该后缀的软件，数值可在{后缀名}文件夹下方OpenWithProgids中选择想要的默认打开软件</p><p>4.在{后缀名}文件夹右键新建项[ShellNew]，在[ShellNew]中新建字符串值[NullFile]</p><p>5.关闭注册表</p><p>6.重启文件资源管理器</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">taskkill &#x2F;f &#x2F;im explorer.exe &amp; start explorer.exe</code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Windows小技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello world!</title>
    <link href="/2024/06/15/helloworld/"/>
    <url>/2024/06/15/helloworld/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="为什么开始写博客">为什么开始写博客？</h2><p>就像学编程语言都是写hello world开始一样，第一个博客也理所应当叫helloworld了（笑）。本来觉得像我这种懒狗这辈子都不会写日记，博客什么的。但是现在大学毕业了，回头一看，发现自己遗忘了以前的很多事情，我也没有任何记录，比如朋友圈，qq空间什么的，我也不爱拍照。突然觉得自己失去了很多珍贵的回忆，于是今天心血来潮部署了这个博客，感谢github让我白嫖服务器。以后有时间想起来就写写日记，也算留下自己的一点点痕迹，免得最后啥都不记得，跟白活了一样。</p><h2 id="流水账">流水账</h2><p>回武汉后感觉还是武汉的东西好吃，哈尔滨的东西虽然量大管饱，但是心里还是有点惦记着热干面豆皮。今天找了家健身房也挺好的，150一个月，地方不大，但是基本的器材都有，而且人不多，基本不用抢器械。前几天没有锻炼，每天脑子都乱乱的，想七想八，估计是因为多巴胺分泌不足吧。今天锻炼了感觉好多了，练胸真的爽的批爆。练完胸部充血显得巨大，但是回家后对着镜子拍照却拍不出来，还得多练，练个一年以上估计训练痕迹就比较明显了。正好新加坡到处都是免费健身房，到时候继续坚持练练。今天尝试了在无氧后加一组有氧爬坡，短短的15min感觉累的够呛，以后努力每次无氧练完后加半小时有氧。虽然是打算脏增肌，但是感觉肚子赘肉挺多看着挺不爽的，要是这辈子都没开自己腹肌的盲盒感觉有点遗憾。今天开始复健，毕业那段时间挺忙的，没啥动力练。</p><p>下下周把前任留在我这的东西还给她，也把留在她那的卡带和耳机拿回来。其实挺想请她吃个散伙饭的，毕竟谈了挺长时间的，但是问了一下室友还有几个好兄弟，还是算了，挺尴尬的。感觉就算见面了我也不知道该说啥，我连称呼都不知道该怎么称呼，到时候临走前祝她毕业快乐就行了。分开后我也不知道是真的放不下还是单纯空虚需要一个人来填补，控制一下变量，再找一个新的就知道是啥情况了，虽然不知道新的咋找，谈恋爱好复杂好麻烦。但是一个人也确实有点无聊，也不能说无聊，至少有对象的话就有个人听我说话了，有些东西没人说的话还是憋的难受。不过仔细一想可能也是我单纯没啥朋友，要是离开了一个人就跟丢了魂一样也太傻逼了。还是充实自己比较重要。分手前前任问我以后有啥打算，我能有啥打算，我走一步看一步，鬼知道我以后咋样。</p><p>说实在的我也迷茫，以后能选择的路太多，并不是能一条路走到黑的单行道，也许回到传统互联网大厂打工，也许在web3发展，也许留在国外，也许回到国内，说不定读个博，抑或是回之前实习的研究所上班，去当个大专老师。我也不知道，想也没结果。不过确实想赚钱，感觉有点穷怕了，想知道有钱是什么滋味。时不时就做迈巴赫的梦，做买房的梦。我是个没有什么理想抱负，也没有什么目标的人，感觉做事基本都需要别人推着，直到最近健身才稍微有点掌握自己的感觉。也许这就是向内求的能力，通过锻炼我就能自我满足，也不会想着跟别人比较。但是别的方面始终想着是希望能听到他人的认可，这就是自卑吧。</p><p>感觉上面的文字好沉重，换点轻松点的话题。这段时间自学区块链感觉还是很快乐的，学习新东西总是有意思的。希望不要重蹈本科的覆辙，浪费时间。去了新加坡多认识认识同学，打打比赛，说不定去web3赚大钱呢。（现在是幻想时间）这几天晚上打打王者的人机，感觉挺有意思，要是吃鸡也有人机就好了，我爱打人机。希望自己变得更好，文明其精神，野蛮其体魄，有时间想起来就写，想不起来就算了。主打一个随意，不过以我对自己的认知，三分钟热度，估计写个几篇就懒得写了。居然干了1000多字了，神奇。看来心里憋的东西还是很多的，没人分享就自己写出来，挺好。</p><h2 id="锻炼">锻炼</h2><table><thead><tr><th>动作</th><th>容量</th></tr></thead><tbody><tr><td>平板杠铃卧推</td><td>45kg 8次2组 6次2组</td></tr><tr><td>平板哑铃卧推</td><td>12.5kg 8次4组</td></tr><tr><td>器械双杠臂屈伸</td><td>8次2组 6次2组</td></tr><tr><td>器械夹胸</td><td>12次4组</td></tr><tr><td>爬坡</td><td>坡度15速度4 15min</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>锻炼</tag>
      
      <tag>流水账</tag>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
